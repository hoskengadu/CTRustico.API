name: CI - Build, Test, SonarQube, Coverage, Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  full-pipeline:
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '8.0.x'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore Academia.Api/Academia.Api.csproj

      - name: Check code format
        run: dotnet format --verify-no-changes

      - name: Security audit
        run: dotnet list package --vulnerable

      - name: Build
        run: dotnet build Academia.Api/Academia.Api.csproj --configuration Release --no-restore

      - name: Install coverlet collector
        run: dotnet add Academia.Tests/Academia.Tests.csproj package coverlet.collector

      - name: Run tests with coverage
        run: dotnet test Academia.Tests/Academia.Tests.csproj --configuration Release --collect:"XPlat Code Coverage"

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Convert coverage to Cobertura
        run: reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:coveragereport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: '**/coverage.cobertura.xml'
          fail_ci_if_error: true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectKey: ${{ secrets.SONAR_PROJECT_KEY }}
          organization: ${{ secrets.SONAR_ORG }}
          token: ${{ secrets.SONAR_TOKEN }}

      - name: Build Docker image
        run: docker build -t myapi:ci .